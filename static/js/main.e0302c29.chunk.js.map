{"version":3,"sources":["components/Tiles/Tiles.js","components/Game/Game.js","App.js","serviceWorker.js","index.js"],"names":["Tiles","props","react_default","a","createElement","src","image","alt","data-id","id","className","newData","data","Game","state","count","highScore","status","checkState","e","thisId","target","getAttribute","forEach","index","wasClicked","_this","gameReset","document","getElementById","innerHTML","setState","console","log","_this2","this","Fragment","array","t","i","m","length","Math","floor","random","dataShuffle","map","onClick","components_Tiles_Tiles","Component","styles","heading","textAlign","description","App","style","components_Game_Game","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6tEAUeA,eAPD,SAAUC,GAEpB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAMK,MAAOC,IAAKN,EAAMM,IAAKC,UAASP,EAAMQ,GAAIC,UAAU,kBCAtEC,SAAUC,GA0EDC,6MAvDXC,MAAQ,CACJC,MAAO,EACPC,UAAW,EACXC,OAAQ,MAGZC,WAAa,SAACC,GAEV,IAAIC,EAASD,EAAEE,OAAOC,aAAa,WAEnCX,EAAQY,QAAQ,SAACC,GACTA,EAAMf,MAAQW,IAETI,EAAMC,WAKPC,EAAKC,aAJLH,EAAMC,YAAa,EACnBG,SAASC,eAAe,cAAcC,UAAY,cAClDJ,EAAKK,SAAS,CAAEhB,MAAOW,EAAKZ,MAAMC,MAAQ,WAU1DY,UAAY,WACRhB,EAAQY,QAAQ,SAAAC,GACZA,EAAMC,YAAa,IAEvBG,SAASC,eAAe,cAAcC,UAAY,eAClDJ,EAAKK,SAAS,CAAEhB,MAAO,IACnBW,EAAKZ,MAAME,UAAYU,EAAKZ,MAAMC,OAClCW,EAAKK,SAAS,CAAEf,UAAWU,EAAKZ,MAAMC,QAE1CiB,QAAQC,IAAI,qFAGP,IAAAC,EAAAC,KACL,OACIjC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiC,SAAA,KACIlC,EAAAC,EAAAC,cAAA,OAAKK,GAAG,cAAR,kBAAqC0B,KAAKrB,MAAMC,MAAhD,kBAAsEoB,KAAKrB,MAAME,UAAjF,IAA4Fd,EAAAC,EAAAC,cAAA,QAAMK,GAAG,gBACrGP,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,OAAKK,GAAG,cA5DJ,SAAU4B,GAG1B,IAFA,IAAsBC,EAAGC,EAArBC,EAAIH,EAAMI,OAEPD,GAEHD,EAAIG,KAAKC,MAAMD,KAAKE,SAAWJ,KAG/BF,EAAID,EAAMG,GACVH,EAAMG,GAAKH,EAAME,GACjBF,EAAME,GAAKD,EAEf,OAAOD,EAiDUQ,CAAYjC,GACRkC,IAAI,SAACtB,GAAD,OAAWtB,EAAAC,EAAAC,cAAA,OAAKM,UAAU,YAAYF,UAASgB,EAAMf,GAAIsC,QAASb,EAAKhB,YAAYhB,EAAAC,EAAAC,cAAC4C,EAAD,CAAO1C,MAAOkB,EAAMlB,MACxGG,GAAIe,EAAMf,iBAhDnBwC,aClBbC,EAAS,CACbC,QAAS,CACPC,UAAW,UAEbC,YAAa,CACXD,UAAW,WAgBAE,mLAVX,OACEpD,EAAAC,EAAAC,cAAAF,EAAAC,EAAAiC,SAAA,KACAlC,EAAAC,EAAAC,cAAA,MAAIK,GAAG,QAAQ8C,MAAOL,EAAOC,SAA7B,4BACAjD,EAAAC,EAAAC,cAAA,KAAGmD,MAAOL,EAAOG,aAAjB,iEACAnD,EAAAC,EAAAC,cAACoD,EAAD,cANYP,aCFEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7D,EAAAC,EAAAC,cAAC4D,EAAD,MAASpC,SAASC,eAAe,SD2H3C,kBAAmBoC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e0302c29.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nconst Tiles = function (props) {\n   \n    return (\n        <img src={props.image} alt={props.alt} data-id={props.id} className=\"tile\" />\n    )\n}\n\nexport default Tiles;\n","import React, { Component } from 'react';\n\nimport Tiles from '../Tiles/Tiles';\nimport data from \"./data.json\";\nimport \"./style.css\";\n\nconst newData = data;\n\nconst dataShuffle = function (array) {\n    let m = array.length, t, i;\n\n    while (m) {\n        //Picks a remaining element\n        i = Math.floor(Math.random() * m--);\n\n        //Swap\n        t = array[m];\n        array[m] = array[i];\n        array[i] = t\n    }\n    return array;\n}\n\nclass Game extends Component {\n\n    state = {\n        count: 0,\n        highScore: 0,\n        status: \"\"\n    }\n\n    checkState = (e) => {\n\n        let thisId = e.target.getAttribute('data-id');\n\n        newData.forEach((index) => {\n            if (index.id === +thisId) {\n\n                if (!index.wasClicked) {\n                    index.wasClicked = true;\n                    document.getElementById(\"last-guess\").innerHTML = \" | Correct!\"\n                    this.setState({ count: this.state.count + 1 });\n                } else {\n                    this.gameReset();\n                }\n\n            }\n        })\n\n    } //end checkState()\n\n    gameReset = () => {\n        newData.forEach(index => {\n            index.wasClicked = false;\n        })\n        document.getElementById(\"last-guess\").innerHTML = \" | Ya Wrong!\"\n        this.setState({ count: 0 })\n        if (this.state.highScore < this.state.count) {\n            this.setState({ highScore: this.state.count })\n        }\n        console.log(\"Restart!\")\n    }\n\n    render() {\n        return (\n            <>\n                <div id=\"score-card\">Current Score: {this.state.count} | High Score: {this.state.highScore} <span id=\"last-guess\"></span></div>\n                <hr></hr>\n                <div id=\"game-board\">\n                    {dataShuffle(data)\n                        .map((index) => <div className=\"tile-wrap\" data-id={index.id} onClick={this.checkState}><Tiles image={index.image}\n                            id={index.id} /></div>\n                        )}\n                </div>\n\n            </>\n        )\n    }\n}\n\nexport default Game;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport Game from \"./components/Game/Game\"\n\nconst styles = {\n  heading: {\n    textAlign: \"center\"\n  },\n  description: {\n    textAlign: \"center\"\n  }\n};\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n      <h1 id=\"title\" style={styles.heading}>Harry Potter Memory Game</h1>\n      <p style={styles.description}>Click a pic to earn a point, but click it again and you lose.</p>\n      <Game />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}